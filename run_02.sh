#!/bin/bash

# X√≥a file output c≈© n·∫øu c√≥
rm -f output_02_thread.csv

# T·∫°o ti√™u ƒë·ªÅ cho file CSV
echo "SIZE,Program,Threads,Time (seconds)" > output_02_thread.csv

# C√°c gi√° tr·ªã SIZE c·∫ßn ch·∫°y
sizes=(100 500 20000 40000 60000 80000)

# H√†m thay ƒë·ªïi gi√° tr·ªã SIZE trong file define.c
update_size_in_define() {           
    sed -i "s/^#define SIZE .*/#define SIZE $1/" define.c
}

# L·∫∑p qua t·ª´ng gi√° tr·ªã SIZE
for size in "${sizes[@]}"
do
    echo "üîπ ƒêang ch·∫°y v·ªõi SIZE = $size"

    # C·∫≠p nh·∫≠t SIZE trong file define.c
    update_size_in_define $size

    # Bi√™n d·ªãch l·∫°i c√°c ch∆∞∆°ng tr√¨nh
    gcc quick_sort.c -o sequential -O2
    gcc -fopenmp quicksort_openmp.c -o openmp -O2
    gcc -pthread quicksort_pthreads.c -o pthread -O2
    mpicc quicksort_mpi.c -o mpi -O2

    # Ch·∫°y m·ªói ch∆∞∆°ng tr√¨nh 10 l·∫ßn v√† t√≠nh trung b√¨nh th·ªùi gian
    for program in sequential openmp pthread mpi
    do
        total_time=0
        for run in {1..10}
        do
            if [ "$program" == "openmp" ]; then
                time=$(./$program 2)
            elif [ "$program" == "pthread" ]; then
                time=$(./$program 2)
            elif [ "$program" == "mpi" ]; then
                time=$(mpirun --oversubscribe -np 2 ./$program)
            else
                time=$(./$program)
            fi
            total_time=$(echo "$total_time + $time" | bc)
        done
        avg_time=$(echo "scale=6; $total_time / 10" | bc)
        if [ "$program" == "sequential" ]; then
            echo "$size,Sequential,1,$avg_time" >> output_02_thread.csv
        elif [ "$program" == "openmp" ]; then
            echo "$size,OpenMP,2,$avg_time" >> output_02_thread.csv
        elif [ "$program" == "pthread" ]; then
            echo "$size,Pthreads,2,$avg_time" >> output_02_thread.csv
        elif [ "$program" == "mpi" ]; then
            echo "$size,MPI,2,$avg_time" >> output_02_thread.csv
        fi
    done
done

# X√≥a c√°c file th·ª±c thi sau khi ch·∫°y xong
rm -f sequential openmp pthread mpi

echo "‚úÖ Ho√†n th√†nh! K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u v√†o output_02_thread.csv"